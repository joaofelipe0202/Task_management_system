@model ICollection<Task_Managment_System.Models.ProjectTask>

<h2>@ViewBag.Title</h2>

<main>
    <section>
        @Html.ActionLink("All", "ShowTasksFor", new { projectId = ViewData["projectId"] }, new { @class = "btn btn-primary" })

        <button class="btn btn-primary"
                onclick="handleShowInCompleteTasksForProject(@ViewData["projectId"])">
            Incomplete
        </button>

        @Html.ActionLink("PercentageComplete", "ShowTasksOrderByCompletion", new { projectId = ViewData["projectId"] }, new { @class = "btn btn-primary" })

        <ul class="list-group tasks">
            @{
                if (Model.Count() > 0)
                {
                    foreach (var item in Model)
                    {
                        string levelClass = null;

                        switch (item.Priority)
                        {
                            case Task_Managment_System.Models.Priority.Urgent:
                                levelClass = " list-group-item-danger";
                                break;
                            case Task_Managment_System.Models.Priority.High:
                                levelClass = " list-group-item-waring";
                                break;
                            case Task_Managment_System.Models.Priority.Average:
                                levelClass = " list-group-item-info";
                                break;
                        }

                        <li class="list-group-item @levelClass" onclick="handleToggleCompleteForTask(event,@item.Id)">
                            @Html.CheckBox("check", item.Complete, new { @class = "form-check-input me-1" })
                            <div>@item.Title</div>
                            <div>Manager: @item.Manager.UserName</div>
                            <div>Percentage: @item.PercentageCompleted%</div>
                            <div>Priority: @item.Priority</div>
                            <div>AssignedUser: @item.AssignedUser</div>
                        </li>
                    }
                }
            }
        </ul>
        @Html.ActionLink("Back to list", "Index")
    </section>
</main>

<script>

    function handleToggleCompleteForTask(event, taskId,projectId) {
        if (event.target.tagName === "INPUT") {
            $.ajax(
                {
                    type: 'POST',
                    url: "@Url.Action("UpdateCompleteStatusForTask", "ProjectManagers")/" + taskId,
                    data: {
                        isChecked: event.target.checked
                    },
                    success: function (result) {
                        //test
                        console.log(result);
                        if(projectId !== undefined)
                            handleShowInCompleteTasksForProject(projectId);
                    },
                    error: function (err) {
                        //test
                        alert(err.responseText);
                    }

                }
            )
        }
    }

    function handleShowInCompleteTasksForProject(projectId) {
        $.ajax(
            {
                type: 'GET',
                url: "@Url.Action("ShowIncompleteTasks", "ProjectManagers")?projectId=" + projectId,
                data: {
                    isChecked: event.target.checked
                },
                success: function (result) {
                    //test
                    console.log(result);
                    $(".tasks").empty();
                    result.tasks.forEach(t => {
                        $(".tasks").append(taskDom(t, result.projectId))
                    })

                },
                error: function (err) {
                    //test
                    alert(err.responseText);
                }

            }
        )
    }

    function taskDom(item, projectId) {

        let levelClass = null;

        switch (item.Priority) {
            case "Urgent":
                levelClass = " list-group-item-danger";
                break;
            case "High":
                levelClass = " list-group-item-waring";
                break;
            case "Average":
                levelClass = " list-group-item-info";
                break;
        }

        return `
            <li class="list-group-item ${levelClass}" onclick="handleToggleCompleteForTask(event, ${item.id},${projectId})">
                <input type="checkbox" class="form-check-input me-1" id="btncheck1" autocomplete="off"}>
                <div>${item.title}</div>
                <div>Manager: ${item.manager}</div>
                <div>Percentage: ${item.percentageCompleted}%</div>
                <div>Priority: ${item.priority}</div>
            </li>
        `
    }

</script>



